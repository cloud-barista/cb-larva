//*
// (This Protocol Documentation is generated by `protoc-gen-doc` )
//
// This proto defines messages and services of Cloud-Barista Network (shortly cb-network).
//
// The cb-network mainly provides services for Cloud Adaptive Network (shortly CLADNet / cladnet).
// The Cloud Adaptive Network is a virtual, common network configured on the different Multi-Cloud
//
// This document describes gRPC-style messages and services.
//
// NOTE - The auto-generated API document describes this proto in alphabetical order.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.17.3
// source: cloud_barista_network.proto

package cb_larva

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//*
// It represents an enumerator for commands to the control cb-network system.
type CommandType int32

const (
	CommandType_UP                 CommandType = 0
	CommandType_DOWN               CommandType = 1
	CommandType_ENABLE_ENCRYPTION  CommandType = 3
	CommandType_DISABLE_ENCRYPTION CommandType = 4
)

// Enum value maps for CommandType.
var (
	CommandType_name = map[int32]string{
		0: "UP",
		1: "DOWN",
		3: "ENABLE_ENCRYPTION",
		4: "DISABLE_ENCRYPTION",
	}
	CommandType_value = map[string]int32{
		"UP":                 0,
		"DOWN":               1,
		"ENABLE_ENCRYPTION":  3,
		"DISABLE_ENCRYPTION": 4,
	}
)

func (x CommandType) Enum() *CommandType {
	p := new(CommandType)
	*p = x
	return p
}

func (x CommandType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CommandType) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_barista_network_proto_enumTypes[0].Descriptor()
}

func (CommandType) Type() protoreflect.EnumType {
	return &file_cloud_barista_network_proto_enumTypes[0]
}

func (x CommandType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CommandType.Descriptor instead.
func (CommandType) EnumDescriptor() ([]byte, []int) {
	return file_cloud_barista_network_proto_rawDescGZIP(), []int{0}
}

type TestType int32

const (
	TestType_CONNECTIVITY TestType = 0
)

// Enum value maps for TestType.
var (
	TestType_name = map[int32]string{
		0: "CONNECTIVITY",
	}
	TestType_value = map[string]int32{
		"CONNECTIVITY": 0,
	}
)

func (x TestType) Enum() *TestType {
	p := new(TestType)
	*p = x
	return p
}

func (x TestType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestType) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_barista_network_proto_enumTypes[1].Descriptor()
}

func (TestType) Type() protoreflect.EnumType {
	return &file_cloud_barista_network_proto_enumTypes[1]
}

func (x TestType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TestType.Descriptor instead.
func (TestType) EnumDescriptor() ([]byte, []int) {
	return file_cloud_barista_network_proto_rawDescGZIP(), []int{1}
}

//*
// It represents a command to control the cb-network system.
type ControlRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CladnetId   string      `protobuf:"bytes,1,opt,name=cladnet_id,json=cladnetId,proto3" json:"cladnet_id,omitempty"`
	CommandType CommandType `protobuf:"varint,2,opt,name=command_type,json=commandType,proto3,enum=cbnet.v1.CommandType" json:"command_type,omitempty"`
}

func (x *ControlRequest) Reset() {
	*x = ControlRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_barista_network_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlRequest) ProtoMessage() {}

func (x *ControlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_barista_network_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlRequest.ProtoReflect.Descriptor instead.
func (*ControlRequest) Descriptor() ([]byte, []int) {
	return file_cloud_barista_network_proto_rawDescGZIP(), []int{0}
}

func (x *ControlRequest) GetCladnetId() string {
	if x != nil {
		return x.CladnetId
	}
	return ""
}

func (x *ControlRequest) GetCommandType() CommandType {
	if x != nil {
		return x.CommandType
	}
	return CommandType_UP
}

//*
// It represents a result of the command to control the cb-network system.
type ControlResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsSucceeded bool   `protobuf:"varint,1,opt,name=is_succeeded,json=isSucceeded,proto3" json:"is_succeeded,omitempty"` // Success or failure
	Message     string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`                             // Message
}

func (x *ControlResponse) Reset() {
	*x = ControlResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_barista_network_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControlResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlResponse) ProtoMessage() {}

func (x *ControlResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_barista_network_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlResponse.ProtoReflect.Descriptor instead.
func (*ControlResponse) Descriptor() ([]byte, []int) {
	return file_cloud_barista_network_proto_rawDescGZIP(), []int{1}
}

func (x *ControlResponse) GetIsSucceeded() bool {
	if x != nil {
		return x.IsSucceeded
	}
	return false
}

func (x *ControlResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

//*
// It represents a result of the command to control the cb-network system.
type TestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CladnetId string   `protobuf:"bytes,1,opt,name=cladnet_id,json=cladnetId,proto3" json:"cladnet_id,omitempty"`
	TestType  TestType `protobuf:"varint,2,opt,name=test_type,json=testType,proto3,enum=cbnet.v1.TestType" json:"test_type,omitempty"`
	TestSpec  string   `protobuf:"bytes,3,opt,name=test_spec,json=testSpec,proto3" json:"test_spec,omitempty"`
}

func (x *TestRequest) Reset() {
	*x = TestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_barista_network_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestRequest) ProtoMessage() {}

func (x *TestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_barista_network_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestRequest.ProtoReflect.Descriptor instead.
func (*TestRequest) Descriptor() ([]byte, []int) {
	return file_cloud_barista_network_proto_rawDescGZIP(), []int{2}
}

func (x *TestRequest) GetCladnetId() string {
	if x != nil {
		return x.CladnetId
	}
	return ""
}

func (x *TestRequest) GetTestType() TestType {
	if x != nil {
		return x.TestType
	}
	return TestType_CONNECTIVITY
}

func (x *TestRequest) GetTestSpec() string {
	if x != nil {
		return x.TestSpec
	}
	return ""
}

//*
// It represents a result of the command to control the cb-network system.
type TestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsSucceeded bool   `protobuf:"varint,1,opt,name=is_succeeded,json=isSucceeded,proto3" json:"is_succeeded,omitempty"` // Success or failure
	Message     string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`                             // Message
}

func (x *TestResponse) Reset() {
	*x = TestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_barista_network_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestResponse) ProtoMessage() {}

func (x *TestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_barista_network_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestResponse.ProtoReflect.Descriptor instead.
func (*TestResponse) Descriptor() ([]byte, []int) {
	return file_cloud_barista_network_proto_rawDescGZIP(), []int{3}
}

func (x *TestResponse) GetIsSucceeded() bool {
	if x != nil {
		return x.IsSucceeded
	}
	return false
}

func (x *TestResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

//*
// It represents a specification of Cloud Adaptive Network.
type CLADNetSpecification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CladnetId        string `protobuf:"bytes,1,opt,name=cladnet_id,json=cladnetId,proto3" json:"cladnet_id,omitempty"`                        // ID of Cloud Adaptive Network
	Name             string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                                   // Name of Cloud Adaptive Network
	Ipv4AddressSpace string `protobuf:"bytes,3,opt,name=ipv4_address_space,json=ipv4AddressSpace,proto3" json:"ipv4_address_space,omitempty"` // IPv4 address space (e.g., 192.168.0.0/24) of Cloud Adaptive Network
	Description      string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`                                     // Description of Cloud Adaptive Network
	RuleType         string `protobuf:"bytes,5,opt,name=rule_type,json=ruleType,proto3" json:"rule_type,omitempty"`                           // Rule type of Cloud Adaptive Network (e.g, basic, cost-prioritized)
}

func (x *CLADNetSpecification) Reset() {
	*x = CLADNetSpecification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_barista_network_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CLADNetSpecification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CLADNetSpecification) ProtoMessage() {}

func (x *CLADNetSpecification) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_barista_network_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CLADNetSpecification.ProtoReflect.Descriptor instead.
func (*CLADNetSpecification) Descriptor() ([]byte, []int) {
	return file_cloud_barista_network_proto_rawDescGZIP(), []int{4}
}

func (x *CLADNetSpecification) GetCladnetId() string {
	if x != nil {
		return x.CladnetId
	}
	return ""
}

func (x *CLADNetSpecification) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CLADNetSpecification) GetIpv4AddressSpace() string {
	if x != nil {
		return x.Ipv4AddressSpace
	}
	return ""
}

func (x *CLADNetSpecification) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CLADNetSpecification) GetRuleType() string {
	if x != nil {
		return x.RuleType
	}
	return ""
}

//*
// It represents a list of Cloud Adaptive Network specifications.
type CLADNetSpecifications struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CladnetSpecifications []*CLADNetSpecification `protobuf:"bytes,1,rep,name=cladnet_specifications,json=cladnetSpecifications,proto3" json:"cladnet_specifications,omitempty"` // A list of Cloud Adaptive Network specification
}

func (x *CLADNetSpecifications) Reset() {
	*x = CLADNetSpecifications{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_barista_network_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CLADNetSpecifications) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CLADNetSpecifications) ProtoMessage() {}

func (x *CLADNetSpecifications) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_barista_network_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CLADNetSpecifications.ProtoReflect.Descriptor instead.
func (*CLADNetSpecifications) Descriptor() ([]byte, []int) {
	return file_cloud_barista_network_proto_rawDescGZIP(), []int{5}
}

func (x *CLADNetSpecifications) GetCladnetSpecifications() []*CLADNetSpecification {
	if x != nil {
		return x.CladnetSpecifications
	}
	return nil
}

//*
// It represents a request of Cloud Adaptive Network.
type CLADNetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CladnetId string `protobuf:"bytes,1,opt,name=cladnet_id,json=cladnetId,proto3" json:"cladnet_id,omitempty"`
}

func (x *CLADNetRequest) Reset() {
	*x = CLADNetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_barista_network_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CLADNetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CLADNetRequest) ProtoMessage() {}

func (x *CLADNetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_barista_network_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CLADNetRequest.ProtoReflect.Descriptor instead.
func (*CLADNetRequest) Descriptor() ([]byte, []int) {
	return file_cloud_barista_network_proto_rawDescGZIP(), []int{6}
}

func (x *CLADNetRequest) GetCladnetId() string {
	if x != nil {
		return x.CladnetId
	}
	return ""
}

//*
// It represents a list of IP networks (e.g., 10.10.5.2/16).
type IPv4CIDRs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ipv4Cidrs []string `protobuf:"bytes,1,rep,name=ipv4_cidrs,json=ipv4Cidrs,proto3" json:"ipv4_cidrs,omitempty"`
}

func (x *IPv4CIDRs) Reset() {
	*x = IPv4CIDRs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_barista_network_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPv4CIDRs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPv4CIDRs) ProtoMessage() {}

func (x *IPv4CIDRs) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_barista_network_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPv4CIDRs.ProtoReflect.Descriptor instead.
func (*IPv4CIDRs) Descriptor() ([]byte, []int) {
	return file_cloud_barista_network_proto_rawDescGZIP(), []int{7}
}

func (x *IPv4CIDRs) GetIpv4Cidrs() []string {
	if x != nil {
		return x.Ipv4Cidrs
	}
	return nil
}

//*
// It represents available IPv4 private address spaces
// (also known as CIDR block, CIDR range, IP address range).
type AvailableIPv4PrivateAddressSpaces struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecommendedIpv4PrivateAddressSpace string   `protobuf:"bytes,1,opt,name=recommended_ipv4_private_address_space,json=recommendedIpv4PrivateAddressSpace,proto3" json:"recommended_ipv4_private_address_space,omitempty"` // A recommended IPv4 address space
	AddressSpace10S                    []string `protobuf:"bytes,2,rep,name=address_space10s,json=addressSpace10s,proto3" json:"address_space10s,omitempty"`                                                                // All available Ipv4 address space in 10.0.0.0/8
	AddressSpace172S                   []string `protobuf:"bytes,3,rep,name=address_space172s,json=addressSpace172s,proto3" json:"address_space172s,omitempty"`                                                             // All available Ipv4 address space in 172.16.0.0/12
	AddressSpace192S                   []string `protobuf:"bytes,4,rep,name=address_space192s,json=addressSpace192s,proto3" json:"address_space192s,omitempty"`                                                             // All available Ipv4 address space in 192.168.0.0/16
}

func (x *AvailableIPv4PrivateAddressSpaces) Reset() {
	*x = AvailableIPv4PrivateAddressSpaces{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_barista_network_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvailableIPv4PrivateAddressSpaces) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvailableIPv4PrivateAddressSpaces) ProtoMessage() {}

func (x *AvailableIPv4PrivateAddressSpaces) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_barista_network_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvailableIPv4PrivateAddressSpaces.ProtoReflect.Descriptor instead.
func (*AvailableIPv4PrivateAddressSpaces) Descriptor() ([]byte, []int) {
	return file_cloud_barista_network_proto_rawDescGZIP(), []int{8}
}

func (x *AvailableIPv4PrivateAddressSpaces) GetRecommendedIpv4PrivateAddressSpace() string {
	if x != nil {
		return x.RecommendedIpv4PrivateAddressSpace
	}
	return ""
}

func (x *AvailableIPv4PrivateAddressSpaces) GetAddressSpace10S() []string {
	if x != nil {
		return x.AddressSpace10S
	}
	return nil
}

func (x *AvailableIPv4PrivateAddressSpaces) GetAddressSpace172S() []string {
	if x != nil {
		return x.AddressSpace172S
	}
	return nil
}

func (x *AvailableIPv4PrivateAddressSpaces) GetAddressSpace192S() []string {
	if x != nil {
		return x.AddressSpace192S
	}
	return nil
}

//*
// It represents a result of attempt to delete a Cloud Adaptive Network.
type DeletionResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsSucceeded          bool                  `protobuf:"varint,1,opt,name=is_succeeded,json=isSucceeded,proto3" json:"is_succeeded,omitempty"`                           // Success or failure
	Message              string                `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`                                                       // Message
	CladnetSpecification *CLADNetSpecification `protobuf:"bytes,3,opt,name=cladnet_specification,json=cladnetSpecification,proto3" json:"cladnet_specification,omitempty"` // A specification of the target Cloud Adaptive Network
}

func (x *DeletionResult) Reset() {
	*x = DeletionResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_barista_network_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletionResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletionResult) ProtoMessage() {}

func (x *DeletionResult) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_barista_network_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletionResult.ProtoReflect.Descriptor instead.
func (*DeletionResult) Descriptor() ([]byte, []int) {
	return file_cloud_barista_network_proto_rawDescGZIP(), []int{9}
}

func (x *DeletionResult) GetIsSucceeded() bool {
	if x != nil {
		return x.IsSucceeded
	}
	return false
}

func (x *DeletionResult) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DeletionResult) GetCladnetSpecification() *CLADNetSpecification {
	if x != nil {
		return x.CladnetSpecification
	}
	return nil
}

//*
// It represents a peer in a Cloud Adaptive Network.
type Peer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CladnetId           string            `protobuf:"bytes,1,opt,name=cladnet_id,json=cladnetId,proto3" json:"cladnet_id,omitempty"`
	HostId              string            `protobuf:"bytes,2,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
	HostName            string            `protobuf:"bytes,3,opt,name=host_name,json=hostName,proto3" json:"host_name,omitempty"`
	HostPrivateIpv4Cidr string            `protobuf:"bytes,4,opt,name=host_private_ipv4_cidr,json=hostPrivateIpv4Cidr,proto3" json:"host_private_ipv4_cidr,omitempty"`
	HostPrivateIp       string            `protobuf:"bytes,5,opt,name=host_private_ip,json=hostPrivateIp,proto3" json:"host_private_ip,omitempty"`
	HostPublicIp        string            `protobuf:"bytes,6,opt,name=host_public_ip,json=hostPublicIp,proto3" json:"host_public_ip,omitempty"`
	Ipv4Cidr            string            `protobuf:"bytes,7,opt,name=ipv4_cidr,json=ipv4Cidr,proto3" json:"ipv4_cidr,omitempty"`
	Ip                  string            `protobuf:"bytes,8,opt,name=ip,proto3" json:"ip,omitempty"`
	State               string            `protobuf:"bytes,9,opt,name=state,proto3" json:"state,omitempty"`
	Details             *CloudInformation `protobuf:"bytes,10,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *Peer) Reset() {
	*x = Peer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_barista_network_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Peer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Peer) ProtoMessage() {}

func (x *Peer) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_barista_network_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Peer.ProtoReflect.Descriptor instead.
func (*Peer) Descriptor() ([]byte, []int) {
	return file_cloud_barista_network_proto_rawDescGZIP(), []int{10}
}

func (x *Peer) GetCladnetId() string {
	if x != nil {
		return x.CladnetId
	}
	return ""
}

func (x *Peer) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

func (x *Peer) GetHostName() string {
	if x != nil {
		return x.HostName
	}
	return ""
}

func (x *Peer) GetHostPrivateIpv4Cidr() string {
	if x != nil {
		return x.HostPrivateIpv4Cidr
	}
	return ""
}

func (x *Peer) GetHostPrivateIp() string {
	if x != nil {
		return x.HostPrivateIp
	}
	return ""
}

func (x *Peer) GetHostPublicIp() string {
	if x != nil {
		return x.HostPublicIp
	}
	return ""
}

func (x *Peer) GetIpv4Cidr() string {
	if x != nil {
		return x.Ipv4Cidr
	}
	return ""
}

func (x *Peer) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *Peer) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *Peer) GetDetails() *CloudInformation {
	if x != nil {
		return x.Details
	}
	return nil
}

//*
// It represents cloud information for a peer as details.
type CloudInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProviderName       string `protobuf:"bytes,1,opt,name=provider_name,json=providerName,proto3" json:"provider_name,omitempty"`
	RegionId           string `protobuf:"bytes,2,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	AvailabilityZoneId string `protobuf:"bytes,3,opt,name=availability_zone_id,json=availabilityZoneId,proto3" json:"availability_zone_id,omitempty"`
	VirtualNetworkId   string `protobuf:"bytes,4,opt,name=virtual_network_id,json=virtualNetworkId,proto3" json:"virtual_network_id,omitempty"`
	SubnetId           string `protobuf:"bytes,5,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
}

func (x *CloudInformation) Reset() {
	*x = CloudInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_barista_network_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudInformation) ProtoMessage() {}

func (x *CloudInformation) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_barista_network_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudInformation.ProtoReflect.Descriptor instead.
func (*CloudInformation) Descriptor() ([]byte, []int) {
	return file_cloud_barista_network_proto_rawDescGZIP(), []int{11}
}

func (x *CloudInformation) GetProviderName() string {
	if x != nil {
		return x.ProviderName
	}
	return ""
}

func (x *CloudInformation) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

func (x *CloudInformation) GetAvailabilityZoneId() string {
	if x != nil {
		return x.AvailabilityZoneId
	}
	return ""
}

func (x *CloudInformation) GetVirtualNetworkId() string {
	if x != nil {
		return x.VirtualNetworkId
	}
	return ""
}

func (x *CloudInformation) GetSubnetId() string {
	if x != nil {
		return x.SubnetId
	}
	return ""
}

//*
// It represents a list of peers.
type Peers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Peers []*Peer `protobuf:"bytes,1,rep,name=peers,proto3" json:"peers,omitempty"` // A list of peers
}

func (x *Peers) Reset() {
	*x = Peers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_barista_network_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Peers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Peers) ProtoMessage() {}

func (x *Peers) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_barista_network_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Peers.ProtoReflect.Descriptor instead.
func (*Peers) Descriptor() ([]byte, []int) {
	return file_cloud_barista_network_proto_rawDescGZIP(), []int{12}
}

func (x *Peers) GetPeers() []*Peer {
	if x != nil {
		return x.Peers
	}
	return nil
}

//*
// It represents a request of peer.
type PeerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CladnetId string `protobuf:"bytes,1,opt,name=cladnet_id,json=cladnetId,proto3" json:"cladnet_id,omitempty"`
	HostId    string `protobuf:"bytes,2,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
}

func (x *PeerRequest) Reset() {
	*x = PeerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_barista_network_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerRequest) ProtoMessage() {}

func (x *PeerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_barista_network_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerRequest.ProtoReflect.Descriptor instead.
func (*PeerRequest) Descriptor() ([]byte, []int) {
	return file_cloud_barista_network_proto_rawDescGZIP(), []int{13}
}

func (x *PeerRequest) GetCladnetId() string {
	if x != nil {
		return x.CladnetId
	}
	return ""
}

func (x *PeerRequest) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

//*
// It represents a request of peer.
type UpdateDetailsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CladnetId        string            `protobuf:"bytes,1,opt,name=cladnet_id,json=cladnetId,proto3" json:"cladnet_id,omitempty"`
	HostId           string            `protobuf:"bytes,2,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
	CloudInforamtion *CloudInformation `protobuf:"bytes,3,opt,name=CloudInforamtion,proto3" json:"CloudInforamtion,omitempty"`
}

func (x *UpdateDetailsRequest) Reset() {
	*x = UpdateDetailsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_barista_network_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDetailsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDetailsRequest) ProtoMessage() {}

func (x *UpdateDetailsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_barista_network_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDetailsRequest.ProtoReflect.Descriptor instead.
func (*UpdateDetailsRequest) Descriptor() ([]byte, []int) {
	return file_cloud_barista_network_proto_rawDescGZIP(), []int{14}
}

func (x *UpdateDetailsRequest) GetCladnetId() string {
	if x != nil {
		return x.CladnetId
	}
	return ""
}

func (x *UpdateDetailsRequest) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

func (x *UpdateDetailsRequest) GetCloudInforamtion() *CloudInformation {
	if x != nil {
		return x.CloudInforamtion
	}
	return nil
}

//*
// It represents a networking rule.
type NetworkingRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CladnetId  string   `protobuf:"bytes,1,opt,name=cladnet_id,json=cladnetId,proto3" json:"cladnet_id,omitempty"`
	HostId     []string `protobuf:"bytes,2,rep,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
	HostName   []string `protobuf:"bytes,3,rep,name=host_name,json=hostName,proto3" json:"host_name,omitempty"`
	PeerIp     []string `protobuf:"bytes,4,rep,name=peer_ip,json=peerIp,proto3" json:"peer_ip,omitempty"`
	SelectedIp []string `protobuf:"bytes,5,rep,name=selected_ip,json=selectedIp,proto3" json:"selected_ip,omitempty"`
	State      []string `protobuf:"bytes,6,rep,name=state,proto3" json:"state,omitempty"`
}

func (x *NetworkingRule) Reset() {
	*x = NetworkingRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_barista_network_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkingRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkingRule) ProtoMessage() {}

func (x *NetworkingRule) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_barista_network_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkingRule.ProtoReflect.Descriptor instead.
func (*NetworkingRule) Descriptor() ([]byte, []int) {
	return file_cloud_barista_network_proto_rawDescGZIP(), []int{15}
}

func (x *NetworkingRule) GetCladnetId() string {
	if x != nil {
		return x.CladnetId
	}
	return ""
}

func (x *NetworkingRule) GetHostId() []string {
	if x != nil {
		return x.HostId
	}
	return nil
}

func (x *NetworkingRule) GetHostName() []string {
	if x != nil {
		return x.HostName
	}
	return nil
}

func (x *NetworkingRule) GetPeerIp() []string {
	if x != nil {
		return x.PeerIp
	}
	return nil
}

func (x *NetworkingRule) GetSelectedIp() []string {
	if x != nil {
		return x.SelectedIp
	}
	return nil
}

func (x *NetworkingRule) GetState() []string {
	if x != nil {
		return x.State
	}
	return nil
}

var File_cloud_barista_network_proto protoreflect.FileDescriptor

var file_cloud_barista_network_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x62, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x5f,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x63,
	0x62, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d,
	0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x69, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x64, 0x6e, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x64, 0x6e, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x63, 0x62, 0x6e, 0x65,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x22, 0x4e, 0x0a,
	0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x65,
	0x64, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x7a, 0x0a,
	0x0b, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x6c, 0x61, 0x64, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x6c, 0x61, 0x64, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x09, 0x74,
	0x65, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12,
	0x2e, 0x63, 0x62, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x08, 0x74, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x65, 0x73, 0x74, 0x53, 0x70, 0x65, 0x63, 0x22, 0x4b, 0x0a, 0x0c, 0x54, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x69, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xb6, 0x01, 0x0a, 0x14, 0x43, 0x4c, 0x41, 0x44, 0x4e,
	0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x64, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x64, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x69, 0x70, 0x76, 0x34, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x70, 0x61, 0x63, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22,
	0x6e, 0x0a, 0x15, 0x43, 0x4c, 0x41, 0x44, 0x4e, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x55, 0x0a, 0x16, 0x63, 0x6c, 0x61, 0x64,
	0x6e, 0x65, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x62, 0x6e, 0x65, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x4c, 0x41, 0x44, 0x4e, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x15, 0x63, 0x6c, 0x61, 0x64, 0x6e, 0x65,
	0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0x2f, 0x0a, 0x0e, 0x43, 0x4c, 0x41, 0x44, 0x4e, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x64, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x64, 0x6e, 0x65, 0x74, 0x49, 0x64,
	0x22, 0x2a, 0x0a, 0x09, 0x49, 0x50, 0x76, 0x34, 0x43, 0x49, 0x44, 0x52, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x63, 0x69, 0x64, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x09, 0x69, 0x70, 0x76, 0x34, 0x43, 0x69, 0x64, 0x72, 0x73, 0x22, 0xfc, 0x01, 0x0a,
	0x21, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x50, 0x76, 0x34, 0x50, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x73, 0x12, 0x52, 0x0a, 0x26, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x22, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x49,
	0x70, 0x76, 0x34, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x31, 0x30, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x70, 0x61, 0x63, 0x65, 0x31, 0x30,
	0x73, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x31, 0x37, 0x32, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x70, 0x61, 0x63, 0x65, 0x31, 0x37, 0x32, 0x73, 0x12, 0x2b,
	0x0a, 0x11, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x31,
	0x39, 0x32, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x53, 0x70, 0x61, 0x63, 0x65, 0x31, 0x39, 0x32, 0x73, 0x22, 0xa2, 0x01, 0x0a, 0x0e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x53, 0x0a, 0x15, 0x63,
	0x6c, 0x61, 0x64, 0x6e, 0x65, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x62, 0x6e,
	0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x4c, 0x41, 0x44, 0x4e, 0x65, 0x74, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x63, 0x6c, 0x61, 0x64,
	0x6e, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xd7, 0x02, 0x0a, 0x04, 0x50, 0x65, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61,
	0x64, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x6c, 0x61, 0x64, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x33,
	0x0a, 0x16, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x69,
	0x70, 0x76, 0x34, 0x5f, 0x63, 0x69, 0x64, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x68, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x49, 0x70, 0x76, 0x34, 0x43,
	0x69, 0x64, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x5f, 0x69, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x68, 0x6f,
	0x73, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x49, 0x70, 0x12, 0x24, 0x0a, 0x0e, 0x68,
	0x6f, 0x73, 0x74, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x69, 0x70, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x68, 0x6f, 0x73, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49,
	0x70, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x63, 0x69, 0x64, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x70, 0x76, 0x34, 0x43, 0x69, 0x64, 0x72, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x62, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0xd1, 0x01, 0x0a, 0x10, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5a, 0x6f, 0x6e,
	0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x22, 0x2d,
	0x0a, 0x05, 0x50, 0x65, 0x65, 0x72, 0x73, 0x12, 0x24, 0x0a, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x62, 0x6e, 0x65, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x52, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x22, 0x45, 0x0a,
	0x0b, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x6c, 0x61, 0x64, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x6c, 0x61, 0x64, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x68,
	0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f,
	0x73, 0x74, 0x49, 0x64, 0x22, 0x96, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x6c, 0x61, 0x64, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x64, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68,
	0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x10, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x61, 0x6d, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x63, 0x62, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x61, 0x6d, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb5, 0x01,
	0x0a, 0x0e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x64, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x64, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x70,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x70, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x70, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x49, 0x70, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2a, 0x4e, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x06, 0x0a, 0x02, 0x55, 0x50, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04,
	0x44, 0x4f, 0x57, 0x4e, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45,
	0x5f, 0x45, 0x4e, 0x43, 0x52, 0x59, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x16, 0x0a,
	0x12, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x45, 0x4e, 0x43, 0x52, 0x59, 0x50, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x04, 0x2a, 0x1c, 0x0a, 0x08, 0x54, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x10, 0x00, 0x32, 0x87, 0x03, 0x0a, 0x17, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x4f, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x0f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x2f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x12, 0x93, 0x01, 0x0a, 0x1b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x12, 0x18, 0x2e, 0x63, 0x62, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x63, 0x62, 0x6e,
	0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x39, 0x12, 0x37, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2f, 0x63, 0x6c, 0x61, 0x64, 0x6e,
	0x65, 0x74, 0x2f, 0x7b, 0x63, 0x6c, 0x61, 0x64, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2f, 0x7b, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x7d, 0x12, 0x84, 0x01, 0x0a, 0x18, 0x74, 0x65, 0x73, 0x74, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x12, 0x15, 0x2e, 0x63, 0x62, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x63, 0x62, 0x6e,
	0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x39, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x22, 0x2e, 0x2f, 0x76, 0x31, 0x2f,
	0x74, 0x65, 0x73, 0x74, 0x2f, 0x63, 0x6c, 0x61, 0x64, 0x6e, 0x65, 0x74, 0x2f, 0x7b, 0x63, 0x6c,
	0x61, 0x64, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x7b,
	0x74, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x7d, 0x3a, 0x01, 0x2a, 0x32, 0xa1, 0x09,
	0x0a, 0x1b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x68, 0x0a,
	0x0a, 0x67, 0x65, 0x74, 0x43, 0x4c, 0x41, 0x44, 0x4e, 0x65, 0x74, 0x12, 0x18, 0x2e, 0x63, 0x62,
	0x6e, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x4c, 0x41, 0x44, 0x4e, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x63, 0x62, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x4c, 0x41, 0x44, 0x4e, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x12, 0x18, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6c, 0x61, 0x64, 0x6e, 0x65, 0x74, 0x2f, 0x7b, 0x63, 0x6c, 0x61, 0x64,
	0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x5e, 0x0a, 0x0e, 0x67, 0x65, 0x74, 0x43, 0x4c,
	0x41, 0x44, 0x4e, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x1f, 0x2e, 0x63, 0x62, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x4c, 0x41,
	0x44, 0x4e, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0x13, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x12, 0x0b, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6c, 0x61, 0x64, 0x6e, 0x65, 0x74, 0x12, 0x67, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x4c, 0x41, 0x44, 0x4e, 0x65, 0x74, 0x12, 0x1e, 0x2e, 0x63, 0x62, 0x6e, 0x65, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x4c, 0x41, 0x44, 0x4e, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x1e, 0x2e, 0x63, 0x62, 0x6e, 0x65, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x4c, 0x41, 0x44, 0x4e, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10,
	0x22, 0x0b, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x61, 0x64, 0x6e, 0x65, 0x74, 0x3a, 0x01, 0x2a,
	0x12, 0x65, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x4c, 0x41, 0x44, 0x4e, 0x65,
	0x74, 0x12, 0x18, 0x2e, 0x63, 0x62, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x4c, 0x41,
	0x44, 0x4e, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x63, 0x62,
	0x6e, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x2a, 0x18, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6c, 0x61, 0x64, 0x6e, 0x65, 0x74, 0x2f, 0x7b, 0x63, 0x6c, 0x61, 0x64,
	0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x74, 0x0a, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x4c, 0x41, 0x44, 0x4e, 0x65, 0x74, 0x12, 0x1e, 0x2e, 0x63, 0x62, 0x6e, 0x65, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x4c, 0x41, 0x44, 0x4e, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x1e, 0x2e, 0x63, 0x62, 0x6e, 0x65, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x4c, 0x41, 0x44, 0x4e, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d,
	0x1a, 0x18, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x61, 0x64, 0x6e, 0x65, 0x74, 0x2f, 0x7b, 0x63,
	0x6c, 0x61, 0x64, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0xa1, 0x01,
	0x0a, 0x2a, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x50, 0x76, 0x34, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x13, 0x2e, 0x63,
	0x62, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x50, 0x76, 0x34, 0x43, 0x49, 0x44, 0x52,
	0x73, 0x1a, 0x2b, 0x2e, 0x63, 0x62, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x50, 0x76, 0x34, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x70, 0x61, 0x63, 0x65, 0x73, 0x22, 0x31,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x22, 0x26, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x61, 0x64,
	0x6e, 0x65, 0x74, 0x2f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x50, 0x76,
	0x34, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x70, 0x61, 0x63, 0x65, 0x73, 0x3a, 0x01,
	0x2a, 0x12, 0x61, 0x0a, 0x07, 0x67, 0x65, 0x74, 0x50, 0x65, 0x65, 0x72, 0x12, 0x15, 0x2e, 0x63,
	0x62, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x63, 0x62, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x65, 0x65, 0x72, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x12, 0x27, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6c, 0x61, 0x64, 0x6e, 0x65, 0x74, 0x2f, 0x7b, 0x63, 0x6c, 0x61, 0x64, 0x6e, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2f, 0x7b, 0x68, 0x6f, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x7d, 0x12, 0x5c, 0x0a, 0x0b, 0x67, 0x65, 0x74, 0x50, 0x65, 0x65, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x15, 0x2e, 0x63, 0x62, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x65, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x63, 0x62, 0x6e,
	0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x73, 0x22, 0x25, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1f, 0x12, 0x1d, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x61, 0x64, 0x6e, 0x65, 0x74,
	0x2f, 0x7b, 0x63, 0x6c, 0x61, 0x64, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x65,
	0x65, 0x72, 0x12, 0x81, 0x01, 0x0a, 0x13, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x4f, 0x66, 0x50, 0x65, 0x65, 0x72, 0x12, 0x1e, 0x2e, 0x63, 0x62, 0x6e,
	0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x63, 0x62, 0x6e,
	0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x22, 0x3a, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x34, 0x1a, 0x2f, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x61, 0x64, 0x6e, 0x65, 0x74, 0x2f,
	0x7b, 0x63, 0x6c, 0x61, 0x64, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x65, 0x65,
	0x72, 0x2f, 0x7b, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x88, 0x01, 0x0a, 0x15, 0x67, 0x65, 0x74, 0x50, 0x65,
	0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65,
	0x12, 0x15, 0x2e, 0x63, 0x62, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x63, 0x62, 0x6e, 0x65, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c,
	0x65, 0x22, 0x3e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38, 0x12, 0x36, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6c, 0x61, 0x64, 0x6e, 0x65, 0x74, 0x2f, 0x7b, 0x63, 0x6c, 0x61, 0x64, 0x6e, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2f, 0x7b, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c,
	0x65, 0x42, 0x8c, 0x03, 0x5a, 0x21, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x62, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x63,
	0x62, 0x2d, 0x6c, 0x61, 0x72, 0x76, 0x61, 0x92, 0x41, 0xe5, 0x02, 0x12, 0xe2, 0x02, 0x0a, 0x2a,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x42, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x20, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x20, 0x28, 0x63, 0x62, 0x2d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x29, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x47, 0x4e, 0x6f, 0x74, 0x65,
	0x20, 0x2d, 0x20, 0x60, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x62, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x73, 0x77, 0x61, 0x67, 0x67, 0x65,
	0x72, 0x2e, 0x6a, 0x73, 0x6f, 0x6e, 0x60, 0x20, 0x69, 0x73, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x60, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x76, 0x32, 0x60, 0x22, 0x69, 0x0a, 0x1a, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x42, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x20, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x62, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x1a, 0x29, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x2d, 0x74, 0x6f, 0x2d,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x62, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x40, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2a, 0x59,
	0x0a, 0x1a, 0x41, 0x70, 0x61, 0x63, 0x68, 0x65, 0x20, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x20, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x32, 0x2e, 0x30, 0x12, 0x3b, 0x68, 0x74,
	0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x62, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x63,
	0x62, 0x2d, 0x6c, 0x61, 0x72, 0x76, 0x61, 0x2f, 0x62, 0x6c, 0x6f, 0x62, 0x2f, 0x6d, 0x61, 0x69,
	0x6e, 0x2f, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x32, 0x03, 0x31, 0x2e, 0x30, 0x3a, 0x20,
	0x0a, 0x15, 0x78, 0x2d, 0x73, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x2d, 0x73, 0x6f,
	0x6d, 0x65, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x12, 0x07, 0x1a, 0x05, 0x79, 0x61, 0x64, 0x64, 0x61,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cloud_barista_network_proto_rawDescOnce sync.Once
	file_cloud_barista_network_proto_rawDescData = file_cloud_barista_network_proto_rawDesc
)

func file_cloud_barista_network_proto_rawDescGZIP() []byte {
	file_cloud_barista_network_proto_rawDescOnce.Do(func() {
		file_cloud_barista_network_proto_rawDescData = protoimpl.X.CompressGZIP(file_cloud_barista_network_proto_rawDescData)
	})
	return file_cloud_barista_network_proto_rawDescData
}

var file_cloud_barista_network_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_cloud_barista_network_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_cloud_barista_network_proto_goTypes = []interface{}{
	(CommandType)(0),                          // 0: cbnet.v1.CommandType
	(TestType)(0),                             // 1: cbnet.v1.TestType
	(*ControlRequest)(nil),                    // 2: cbnet.v1.ControlRequest
	(*ControlResponse)(nil),                   // 3: cbnet.v1.ControlResponse
	(*TestRequest)(nil),                       // 4: cbnet.v1.TestRequest
	(*TestResponse)(nil),                      // 5: cbnet.v1.TestResponse
	(*CLADNetSpecification)(nil),              // 6: cbnet.v1.CLADNetSpecification
	(*CLADNetSpecifications)(nil),             // 7: cbnet.v1.CLADNetSpecifications
	(*CLADNetRequest)(nil),                    // 8: cbnet.v1.CLADNetRequest
	(*IPv4CIDRs)(nil),                         // 9: cbnet.v1.IPv4CIDRs
	(*AvailableIPv4PrivateAddressSpaces)(nil), // 10: cbnet.v1.AvailableIPv4PrivateAddressSpaces
	(*DeletionResult)(nil),                    // 11: cbnet.v1.DeletionResult
	(*Peer)(nil),                              // 12: cbnet.v1.Peer
	(*CloudInformation)(nil),                  // 13: cbnet.v1.CloudInformation
	(*Peers)(nil),                             // 14: cbnet.v1.Peers
	(*PeerRequest)(nil),                       // 15: cbnet.v1.PeerRequest
	(*UpdateDetailsRequest)(nil),              // 16: cbnet.v1.UpdateDetailsRequest
	(*NetworkingRule)(nil),                    // 17: cbnet.v1.NetworkingRule
	(*emptypb.Empty)(nil),                     // 18: google.protobuf.Empty
	(*wrapperspb.StringValue)(nil),            // 19: google.protobuf.StringValue
}
var file_cloud_barista_network_proto_depIdxs = []int32{
	0,  // 0: cbnet.v1.ControlRequest.command_type:type_name -> cbnet.v1.CommandType
	1,  // 1: cbnet.v1.TestRequest.test_type:type_name -> cbnet.v1.TestType
	6,  // 2: cbnet.v1.CLADNetSpecifications.cladnet_specifications:type_name -> cbnet.v1.CLADNetSpecification
	6,  // 3: cbnet.v1.DeletionResult.cladnet_specification:type_name -> cbnet.v1.CLADNetSpecification
	13, // 4: cbnet.v1.Peer.details:type_name -> cbnet.v1.CloudInformation
	12, // 5: cbnet.v1.Peers.peers:type_name -> cbnet.v1.Peer
	13, // 6: cbnet.v1.UpdateDetailsRequest.CloudInforamtion:type_name -> cbnet.v1.CloudInformation
	18, // 7: cbnet.v1.SystemManagementService.health:input_type -> google.protobuf.Empty
	2,  // 8: cbnet.v1.SystemManagementService.controlCloudAdaptiveNetwork:input_type -> cbnet.v1.ControlRequest
	4,  // 9: cbnet.v1.SystemManagementService.testCloudAdaptiveNetwork:input_type -> cbnet.v1.TestRequest
	8,  // 10: cbnet.v1.CloudAdaptiveNetworkService.getCLADNet:input_type -> cbnet.v1.CLADNetRequest
	18, // 11: cbnet.v1.CloudAdaptiveNetworkService.getCLADNetList:input_type -> google.protobuf.Empty
	6,  // 12: cbnet.v1.CloudAdaptiveNetworkService.createCLADNet:input_type -> cbnet.v1.CLADNetSpecification
	8,  // 13: cbnet.v1.CloudAdaptiveNetworkService.deleteCLADNet:input_type -> cbnet.v1.CLADNetRequest
	6,  // 14: cbnet.v1.CloudAdaptiveNetworkService.updateCLADNet:input_type -> cbnet.v1.CLADNetSpecification
	9,  // 15: cbnet.v1.CloudAdaptiveNetworkService.recommendAvailableIPv4PrivateAddressSpaces:input_type -> cbnet.v1.IPv4CIDRs
	15, // 16: cbnet.v1.CloudAdaptiveNetworkService.getPeer:input_type -> cbnet.v1.PeerRequest
	15, // 17: cbnet.v1.CloudAdaptiveNetworkService.getPeerList:input_type -> cbnet.v1.PeerRequest
	16, // 18: cbnet.v1.CloudAdaptiveNetworkService.updateDetailsOfPeer:input_type -> cbnet.v1.UpdateDetailsRequest
	15, // 19: cbnet.v1.CloudAdaptiveNetworkService.getPeerNetworkingRule:input_type -> cbnet.v1.PeerRequest
	19, // 20: cbnet.v1.SystemManagementService.health:output_type -> google.protobuf.StringValue
	3,  // 21: cbnet.v1.SystemManagementService.controlCloudAdaptiveNetwork:output_type -> cbnet.v1.ControlResponse
	5,  // 22: cbnet.v1.SystemManagementService.testCloudAdaptiveNetwork:output_type -> cbnet.v1.TestResponse
	6,  // 23: cbnet.v1.CloudAdaptiveNetworkService.getCLADNet:output_type -> cbnet.v1.CLADNetSpecification
	7,  // 24: cbnet.v1.CloudAdaptiveNetworkService.getCLADNetList:output_type -> cbnet.v1.CLADNetSpecifications
	6,  // 25: cbnet.v1.CloudAdaptiveNetworkService.createCLADNet:output_type -> cbnet.v1.CLADNetSpecification
	11, // 26: cbnet.v1.CloudAdaptiveNetworkService.deleteCLADNet:output_type -> cbnet.v1.DeletionResult
	6,  // 27: cbnet.v1.CloudAdaptiveNetworkService.updateCLADNet:output_type -> cbnet.v1.CLADNetSpecification
	10, // 28: cbnet.v1.CloudAdaptiveNetworkService.recommendAvailableIPv4PrivateAddressSpaces:output_type -> cbnet.v1.AvailableIPv4PrivateAddressSpaces
	12, // 29: cbnet.v1.CloudAdaptiveNetworkService.getPeer:output_type -> cbnet.v1.Peer
	14, // 30: cbnet.v1.CloudAdaptiveNetworkService.getPeerList:output_type -> cbnet.v1.Peers
	12, // 31: cbnet.v1.CloudAdaptiveNetworkService.updateDetailsOfPeer:output_type -> cbnet.v1.Peer
	17, // 32: cbnet.v1.CloudAdaptiveNetworkService.getPeerNetworkingRule:output_type -> cbnet.v1.NetworkingRule
	20, // [20:33] is the sub-list for method output_type
	7,  // [7:20] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_cloud_barista_network_proto_init() }
func file_cloud_barista_network_proto_init() {
	if File_cloud_barista_network_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cloud_barista_network_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ControlRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_barista_network_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ControlResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_barista_network_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_barista_network_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_barista_network_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CLADNetSpecification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_barista_network_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CLADNetSpecifications); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_barista_network_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CLADNetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_barista_network_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPv4CIDRs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_barista_network_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvailableIPv4PrivateAddressSpaces); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_barista_network_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletionResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_barista_network_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Peer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_barista_network_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_barista_network_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Peers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_barista_network_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_barista_network_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDetailsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_barista_network_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkingRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cloud_barista_network_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_cloud_barista_network_proto_goTypes,
		DependencyIndexes: file_cloud_barista_network_proto_depIdxs,
		EnumInfos:         file_cloud_barista_network_proto_enumTypes,
		MessageInfos:      file_cloud_barista_network_proto_msgTypes,
	}.Build()
	File_cloud_barista_network_proto = out.File
	file_cloud_barista_network_proto_rawDesc = nil
	file_cloud_barista_network_proto_goTypes = nil
	file_cloud_barista_network_proto_depIdxs = nil
}
