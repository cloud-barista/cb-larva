//*
// (This Protocol Documentation is generated by `protoc-gen-doc` )
//
// This proto defines messages and services of Cloud-Barista Network (shortly cb-network).
//
// The cb-network mainly provides services for Cloud Adaptive Network (shortly CLADNet / cladnet).
// The Cloud Adaptive Network is a virtual, common network configured on the different Multi-Cloud
//
// This document describes gRPC-style messages and services.
//
// NOTE - The auto-generated API document describes this proto in alphabetical order.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.17.3
// source: cloud_barista_network.proto

package cb_larva

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//*
// It represents an enumerator for commands to the control cb-network system.
type ControlCommand int32

const (
	ControlCommand_UP                 ControlCommand = 0
	ControlCommand_DOWN               ControlCommand = 1
	ControlCommand_CHECK_CONNECTIVITY ControlCommand = 2
	ControlCommand_ENABLE_ENCRYPTION  ControlCommand = 3
	ControlCommand_DISABLE_ENCRYPTION ControlCommand = 4
)

// Enum value maps for ControlCommand.
var (
	ControlCommand_name = map[int32]string{
		0: "UP",
		1: "DOWN",
		2: "CHECK_CONNECTIVITY",
		3: "ENABLE_ENCRYPTION",
		4: "DISABLE_ENCRYPTION",
	}
	ControlCommand_value = map[string]int32{
		"UP":                 0,
		"DOWN":               1,
		"CHECK_CONNECTIVITY": 2,
		"ENABLE_ENCRYPTION":  3,
		"DISABLE_ENCRYPTION": 4,
	}
)

func (x ControlCommand) Enum() *ControlCommand {
	p := new(ControlCommand)
	*p = x
	return p
}

func (x ControlCommand) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ControlCommand) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_barista_network_proto_enumTypes[0].Descriptor()
}

func (ControlCommand) Type() protoreflect.EnumType {
	return &file_cloud_barista_network_proto_enumTypes[0]
}

func (x ControlCommand) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ControlCommand.Descriptor instead.
func (ControlCommand) EnumDescriptor() ([]byte, []int) {
	return file_cloud_barista_network_proto_rawDescGZIP(), []int{0}
}

//*
// It represents a command to control the cb-network system.
type Command struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CladnetId            string         `protobuf:"bytes,1,opt,name=cladnet_id,json=cladnetId,proto3" json:"cladnet_id,omitempty"`
	ControlCommand       ControlCommand `protobuf:"varint,2,opt,name=control_command,json=controlCommand,proto3,enum=cbnet.v1.ControlCommand" json:"control_command,omitempty"`
	ControlCommandOption string         `protobuf:"bytes,3,opt,name=control_command_option,json=controlCommandOption,proto3" json:"control_command_option,omitempty"`
}

func (x *Command) Reset() {
	*x = Command{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_barista_network_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Command) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Command) ProtoMessage() {}

func (x *Command) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_barista_network_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Command.ProtoReflect.Descriptor instead.
func (*Command) Descriptor() ([]byte, []int) {
	return file_cloud_barista_network_proto_rawDescGZIP(), []int{0}
}

func (x *Command) GetCladnetId() string {
	if x != nil {
		return x.CladnetId
	}
	return ""
}

func (x *Command) GetControlCommand() ControlCommand {
	if x != nil {
		return x.ControlCommand
	}
	return ControlCommand_UP
}

func (x *Command) GetControlCommandOption() string {
	if x != nil {
		return x.ControlCommandOption
	}
	return ""
}

//*
// It represents a result of the command to control the cb-network system.
type CommandResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsSucceeded bool   `protobuf:"varint,1,opt,name=is_succeeded,json=isSucceeded,proto3" json:"is_succeeded,omitempty"` // Success or failure
	Message     string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`                             // Message
}

func (x *CommandResult) Reset() {
	*x = CommandResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_barista_network_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandResult) ProtoMessage() {}

func (x *CommandResult) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_barista_network_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandResult.ProtoReflect.Descriptor instead.
func (*CommandResult) Descriptor() ([]byte, []int) {
	return file_cloud_barista_network_proto_rawDescGZIP(), []int{1}
}

func (x *CommandResult) GetIsSucceeded() bool {
	if x != nil {
		return x.IsSucceeded
	}
	return false
}

func (x *CommandResult) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

//*
// It represents a specification of Cloud Adaptive Network.
type CLADNetSpecification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                                       // ID of Cloud Adaptive Network
	Name             string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                                   //  name of Cloud Adaptive Network
	Ipv4AddressSpace string `protobuf:"bytes,3,opt,name=ipv4_address_space,json=ipv4AddressSpace,proto3" json:"ipv4_address_space,omitempty"` // IPv4 address space (e.g., 192.168.0.0/24) of Cloud Adaptive Network
	Description      string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`                                     // Description of Cloud Adaptive Network
}

func (x *CLADNetSpecification) Reset() {
	*x = CLADNetSpecification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_barista_network_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CLADNetSpecification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CLADNetSpecification) ProtoMessage() {}

func (x *CLADNetSpecification) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_barista_network_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CLADNetSpecification.ProtoReflect.Descriptor instead.
func (*CLADNetSpecification) Descriptor() ([]byte, []int) {
	return file_cloud_barista_network_proto_rawDescGZIP(), []int{2}
}

func (x *CLADNetSpecification) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CLADNetSpecification) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CLADNetSpecification) GetIpv4AddressSpace() string {
	if x != nil {
		return x.Ipv4AddressSpace
	}
	return ""
}

func (x *CLADNetSpecification) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

//*
// It represents a list of Cloud Adaptive Network specifications.
type CLADNetSpecifications struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CladnetSpecifications []*CLADNetSpecification `protobuf:"bytes,1,rep,name=cladnet_specifications,json=cladnetSpecifications,proto3" json:"cladnet_specifications,omitempty"` // A list of Cloud Adaptive Network specification
}

func (x *CLADNetSpecifications) Reset() {
	*x = CLADNetSpecifications{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_barista_network_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CLADNetSpecifications) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CLADNetSpecifications) ProtoMessage() {}

func (x *CLADNetSpecifications) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_barista_network_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CLADNetSpecifications.ProtoReflect.Descriptor instead.
func (*CLADNetSpecifications) Descriptor() ([]byte, []int) {
	return file_cloud_barista_network_proto_rawDescGZIP(), []int{3}
}

func (x *CLADNetSpecifications) GetCladnetSpecifications() []*CLADNetSpecification {
	if x != nil {
		return x.CladnetSpecifications
	}
	return nil
}

//*
// It represents an ID of Cloud Adaptive Network.
type CLADNetID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CladnetId string `protobuf:"bytes,1,opt,name=cladnet_id,json=cladnetId,proto3" json:"cladnet_id,omitempty"`
}

func (x *CLADNetID) Reset() {
	*x = CLADNetID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_barista_network_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CLADNetID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CLADNetID) ProtoMessage() {}

func (x *CLADNetID) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_barista_network_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CLADNetID.ProtoReflect.Descriptor instead.
func (*CLADNetID) Descriptor() ([]byte, []int) {
	return file_cloud_barista_network_proto_rawDescGZIP(), []int{4}
}

func (x *CLADNetID) GetCladnetId() string {
	if x != nil {
		return x.CladnetId
	}
	return ""
}

//*
// It represents a list of IP networks (e.g., 10.10.1.5/16).
type IPNetworks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpNetworks []string `protobuf:"bytes,1,rep,name=ip_networks,json=ipNetworks,proto3" json:"ip_networks,omitempty"`
}

func (x *IPNetworks) Reset() {
	*x = IPNetworks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_barista_network_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPNetworks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPNetworks) ProtoMessage() {}

func (x *IPNetworks) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_barista_network_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPNetworks.ProtoReflect.Descriptor instead.
func (*IPNetworks) Descriptor() ([]byte, []int) {
	return file_cloud_barista_network_proto_rawDescGZIP(), []int{5}
}

func (x *IPNetworks) GetIpNetworks() []string {
	if x != nil {
		return x.IpNetworks
	}
	return nil
}

//*
// It represents available IPv4 private address spaces
// (also known as CIDR block, CIDR range, IP address range).
type AvailableIPv4PrivateAddressSpaces struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecommendedIpv4PrivateAddressSpace string   `protobuf:"bytes,1,opt,name=recommended_ipv4_private_address_space,json=recommendedIpv4PrivateAddressSpace,proto3" json:"recommended_ipv4_private_address_space,omitempty"` // A recommended IPv4 address space
	AddressSpace10S                    []string `protobuf:"bytes,2,rep,name=address_space10s,json=addressSpace10s,proto3" json:"address_space10s,omitempty"`                                                                // All available Ipv4 address space in 10.0.0.0/8
	AddressSpace172S                   []string `protobuf:"bytes,3,rep,name=address_space172s,json=addressSpace172s,proto3" json:"address_space172s,omitempty"`                                                             // All available Ipv4 address space in 172.16.0.0/12
	AddressSpace192S                   []string `protobuf:"bytes,4,rep,name=address_space192s,json=addressSpace192s,proto3" json:"address_space192s,omitempty"`                                                             // All available Ipv4 address space in 192.168.0.0/16
}

func (x *AvailableIPv4PrivateAddressSpaces) Reset() {
	*x = AvailableIPv4PrivateAddressSpaces{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_barista_network_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvailableIPv4PrivateAddressSpaces) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvailableIPv4PrivateAddressSpaces) ProtoMessage() {}

func (x *AvailableIPv4PrivateAddressSpaces) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_barista_network_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvailableIPv4PrivateAddressSpaces.ProtoReflect.Descriptor instead.
func (*AvailableIPv4PrivateAddressSpaces) Descriptor() ([]byte, []int) {
	return file_cloud_barista_network_proto_rawDescGZIP(), []int{6}
}

func (x *AvailableIPv4PrivateAddressSpaces) GetRecommendedIpv4PrivateAddressSpace() string {
	if x != nil {
		return x.RecommendedIpv4PrivateAddressSpace
	}
	return ""
}

func (x *AvailableIPv4PrivateAddressSpaces) GetAddressSpace10S() []string {
	if x != nil {
		return x.AddressSpace10S
	}
	return nil
}

func (x *AvailableIPv4PrivateAddressSpaces) GetAddressSpace172S() []string {
	if x != nil {
		return x.AddressSpace172S
	}
	return nil
}

func (x *AvailableIPv4PrivateAddressSpaces) GetAddressSpace192S() []string {
	if x != nil {
		return x.AddressSpace192S
	}
	return nil
}

//*
// It represents a result of attempt to delete a Cloud Adaptive Network.
type DeletionResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsSucceeded          bool                  `protobuf:"varint,1,opt,name=is_succeeded,json=isSucceeded,proto3" json:"is_succeeded,omitempty"`                           // Success or failure
	Message              string                `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`                                                       // Message
	CladnetSpecification *CLADNetSpecification `protobuf:"bytes,3,opt,name=cladnet_specification,json=cladnetSpecification,proto3" json:"cladnet_specification,omitempty"` // A specification of the target Cloud Adaptive Network
}

func (x *DeletionResult) Reset() {
	*x = DeletionResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_barista_network_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletionResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletionResult) ProtoMessage() {}

func (x *DeletionResult) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_barista_network_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletionResult.ProtoReflect.Descriptor instead.
func (*DeletionResult) Descriptor() ([]byte, []int) {
	return file_cloud_barista_network_proto_rawDescGZIP(), []int{7}
}

func (x *DeletionResult) GetIsSucceeded() bool {
	if x != nil {
		return x.IsSucceeded
	}
	return false
}

func (x *DeletionResult) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DeletionResult) GetCladnetSpecification() *CLADNetSpecification {
	if x != nil {
		return x.CladnetSpecification
	}
	return nil
}

var File_cloud_barista_network_proto protoreflect.FileDescriptor

var file_cloud_barista_network_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x62, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x5f,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x63,
	0x62, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d,
	0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xa1, 0x01, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x64, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x64, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x41, 0x0a,
	0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x63, 0x62, 0x6e, 0x65, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x12, 0x34, 0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4c, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69,
	0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x14, 0x43, 0x4c, 0x41, 0x44, 0x4e, 0x65, 0x74,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69,
	0x70, 0x76, 0x34, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x6e, 0x0a, 0x15, 0x43, 0x4c, 0x41, 0x44, 0x4e, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x55, 0x0a, 0x16, 0x63, 0x6c,
	0x61, 0x64, 0x6e, 0x65, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x62, 0x6e,
	0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x4c, 0x41, 0x44, 0x4e, 0x65, 0x74, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x15, 0x63, 0x6c, 0x61, 0x64,
	0x6e, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0x2a, 0x0a, 0x09, 0x43, 0x4c, 0x41, 0x44, 0x4e, 0x65, 0x74, 0x49, 0x44, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x64, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x64, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x22, 0x2d, 0x0a,
	0x0a, 0x49, 0x50, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69,
	0x70, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x69, 0x70, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x22, 0xfc, 0x01, 0x0a,
	0x21, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x50, 0x76, 0x34, 0x50, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x73, 0x12, 0x52, 0x0a, 0x26, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x22, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x49,
	0x70, 0x76, 0x34, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x31, 0x30, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x70, 0x61, 0x63, 0x65, 0x31, 0x30,
	0x73, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x31, 0x37, 0x32, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x70, 0x61, 0x63, 0x65, 0x31, 0x37, 0x32, 0x73, 0x12, 0x2b,
	0x0a, 0x11, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x31,
	0x39, 0x32, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x53, 0x70, 0x61, 0x63, 0x65, 0x31, 0x39, 0x32, 0x73, 0x22, 0xa2, 0x01, 0x0a, 0x0e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x53, 0x0a, 0x15, 0x63,
	0x6c, 0x61, 0x64, 0x6e, 0x65, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x62, 0x6e,
	0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x4c, 0x41, 0x44, 0x4e, 0x65, 0x74, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x63, 0x6c, 0x61, 0x64,
	0x6e, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2a, 0x69, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x12, 0x06, 0x0a, 0x02, 0x55, 0x50, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x4f,
	0x57, 0x4e, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x43, 0x4f,
	0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11,
	0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x45, 0x4e, 0x43, 0x52, 0x59, 0x50, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x45,
	0x4e, 0x43, 0x52, 0x59, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x32, 0xdb, 0x01, 0x0a, 0x17,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4f, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x0f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x09, 0x12,
	0x07, 0x2f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x6f, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x68, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x12, 0x11, 0x2e, 0x63, 0x62, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x1a, 0x17, 0x2e, 0x63, 0x62, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x2b, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x25, 0x22, 0x20, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x2f, 0x63, 0x6c, 0x61, 0x64, 0x6e, 0x65, 0x74, 0x2f, 0x7b, 0x63, 0x6c, 0x61, 0x64, 0x6e,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x32, 0xb1, 0x05, 0x0a, 0x1b, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x63, 0x0a, 0x0a, 0x67, 0x65, 0x74,
	0x43, 0x4c, 0x41, 0x44, 0x4e, 0x65, 0x74, 0x12, 0x13, 0x2e, 0x63, 0x62, 0x6e, 0x65, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x4c, 0x41, 0x44, 0x4e, 0x65, 0x74, 0x49, 0x44, 0x1a, 0x1e, 0x2e, 0x63,
	0x62, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x4c, 0x41, 0x44, 0x4e, 0x65, 0x74, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x20, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1a, 0x12, 0x18, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x61, 0x64, 0x6e, 0x65,
	0x74, 0x2f, 0x7b, 0x63, 0x6c, 0x61, 0x64, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x5e,
	0x0a, 0x0e, 0x67, 0x65, 0x74, 0x43, 0x4c, 0x41, 0x44, 0x4e, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1f, 0x2e, 0x63, 0x62, 0x6e, 0x65, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x4c, 0x41, 0x44, 0x4e, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x13, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x0d, 0x12, 0x0b, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x61, 0x64, 0x6e, 0x65, 0x74, 0x12, 0x67,
	0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x4c, 0x41, 0x44, 0x4e, 0x65, 0x74, 0x12,
	0x1e, 0x2e, 0x63, 0x62, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x4c, 0x41, 0x44, 0x4e,
	0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a,
	0x1e, 0x2e, 0x63, 0x62, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x4c, 0x41, 0x44, 0x4e,
	0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x22, 0x0b, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x61,
	0x64, 0x6e, 0x65, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x53, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x4c, 0x41, 0x44, 0x4e, 0x65, 0x74, 0x12, 0x13, 0x2e, 0x63, 0x62, 0x6e, 0x65, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x4c, 0x41, 0x44, 0x4e, 0x65, 0x74, 0x49, 0x44, 0x1a, 0x18, 0x2e,
	0x63, 0x62, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x13, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x2a,
	0x0b, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x61, 0x64, 0x6e, 0x65, 0x74, 0x12, 0x67, 0x0a, 0x0d,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x4c, 0x41, 0x44, 0x4e, 0x65, 0x74, 0x12, 0x1e, 0x2e,
	0x63, 0x62, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x4c, 0x41, 0x44, 0x4e, 0x65, 0x74,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x1e, 0x2e,
	0x63, 0x62, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x4c, 0x41, 0x44, 0x4e, 0x65, 0x74,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x16, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x10, 0x1a, 0x0b, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x61, 0x64, 0x6e,
	0x65, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0xa5, 0x01, 0x0a, 0x2a, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x50, 0x76, 0x34,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x73, 0x12, 0x14, 0x2e, 0x63, 0x62, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x50, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x1a, 0x2b, 0x2e, 0x63, 0x62, 0x6e,
	0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x49,
	0x50, 0x76, 0x34, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x53, 0x70, 0x61, 0x63, 0x65, 0x73, 0x22, 0x34, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x22,
	0x29, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x61, 0x64, 0x6e, 0x65, 0x74, 0x2f, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x2d, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x2d, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x42, 0x8c, 0x03,
	0x5a, 0x21, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2d, 0x62, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x63, 0x62, 0x2d, 0x6c, 0x61,
	0x72, 0x76, 0x61, 0x92, 0x41, 0xe5, 0x02, 0x12, 0xe2, 0x02, 0x0a, 0x2a, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x2d, 0x42, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x20, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x20, 0x28, 0x63, 0x62, 0x2d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x29, 0x20, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x47, 0x4e, 0x6f, 0x74, 0x65, 0x20, 0x2d, 0x20, 0x60,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x62, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x5f, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x73, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x6a, 0x73,
	0x6f, 0x6e, 0x60, 0x20, 0x69, 0x73, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x20, 0x62, 0x79, 0x20, 0x60, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x60, 0x22,
	0x69, 0x0a, 0x1a, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x42, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x68,
	0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x62, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x1a,
	0x29, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x2d, 0x74, 0x6f, 0x2d, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2d, 0x62, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x40, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2a, 0x59, 0x0a, 0x1a, 0x41, 0x70,
	0x61, 0x63, 0x68, 0x65, 0x20, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x20, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x20, 0x32, 0x2e, 0x30, 0x12, 0x3b, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a,
	0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2d, 0x62, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x63, 0x62, 0x2d, 0x6c, 0x61,
	0x72, 0x76, 0x61, 0x2f, 0x62, 0x6c, 0x6f, 0x62, 0x2f, 0x6d, 0x61, 0x69, 0x6e, 0x2f, 0x4c, 0x49,
	0x43, 0x45, 0x4e, 0x53, 0x45, 0x32, 0x03, 0x31, 0x2e, 0x30, 0x3a, 0x20, 0x0a, 0x15, 0x78, 0x2d,
	0x73, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x2d, 0x73, 0x6f, 0x6d, 0x65, 0x74, 0x68,
	0x69, 0x6e, 0x67, 0x12, 0x07, 0x1a, 0x05, 0x79, 0x61, 0x64, 0x64, 0x61, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cloud_barista_network_proto_rawDescOnce sync.Once
	file_cloud_barista_network_proto_rawDescData = file_cloud_barista_network_proto_rawDesc
)

func file_cloud_barista_network_proto_rawDescGZIP() []byte {
	file_cloud_barista_network_proto_rawDescOnce.Do(func() {
		file_cloud_barista_network_proto_rawDescData = protoimpl.X.CompressGZIP(file_cloud_barista_network_proto_rawDescData)
	})
	return file_cloud_barista_network_proto_rawDescData
}

var file_cloud_barista_network_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_cloud_barista_network_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_cloud_barista_network_proto_goTypes = []interface{}{
	(ControlCommand)(0),                       // 0: cbnet.v1.ControlCommand
	(*Command)(nil),                           // 1: cbnet.v1.Command
	(*CommandResult)(nil),                     // 2: cbnet.v1.CommandResult
	(*CLADNetSpecification)(nil),              // 3: cbnet.v1.CLADNetSpecification
	(*CLADNetSpecifications)(nil),             // 4: cbnet.v1.CLADNetSpecifications
	(*CLADNetID)(nil),                         // 5: cbnet.v1.CLADNetID
	(*IPNetworks)(nil),                        // 6: cbnet.v1.IPNetworks
	(*AvailableIPv4PrivateAddressSpaces)(nil), // 7: cbnet.v1.AvailableIPv4PrivateAddressSpaces
	(*DeletionResult)(nil),                    // 8: cbnet.v1.DeletionResult
	(*emptypb.Empty)(nil),                     // 9: google.protobuf.Empty
	(*wrapperspb.StringValue)(nil),            // 10: google.protobuf.StringValue
}
var file_cloud_barista_network_proto_depIdxs = []int32{
	0,  // 0: cbnet.v1.Command.control_command:type_name -> cbnet.v1.ControlCommand
	3,  // 1: cbnet.v1.CLADNetSpecifications.cladnet_specifications:type_name -> cbnet.v1.CLADNetSpecification
	3,  // 2: cbnet.v1.DeletionResult.cladnet_specification:type_name -> cbnet.v1.CLADNetSpecification
	9,  // 3: cbnet.v1.SystemManagementService.health:input_type -> google.protobuf.Empty
	1,  // 4: cbnet.v1.SystemManagementService.commandFromTheRemote:input_type -> cbnet.v1.Command
	5,  // 5: cbnet.v1.CloudAdaptiveNetworkService.getCLADNet:input_type -> cbnet.v1.CLADNetID
	9,  // 6: cbnet.v1.CloudAdaptiveNetworkService.getCLADNetList:input_type -> google.protobuf.Empty
	3,  // 7: cbnet.v1.CloudAdaptiveNetworkService.createCLADNet:input_type -> cbnet.v1.CLADNetSpecification
	5,  // 8: cbnet.v1.CloudAdaptiveNetworkService.deleteCLADNet:input_type -> cbnet.v1.CLADNetID
	3,  // 9: cbnet.v1.CloudAdaptiveNetworkService.updateCLADNet:input_type -> cbnet.v1.CLADNetSpecification
	6,  // 10: cbnet.v1.CloudAdaptiveNetworkService.recommendAvailableIPv4PrivateAddressSpaces:input_type -> cbnet.v1.IPNetworks
	10, // 11: cbnet.v1.SystemManagementService.health:output_type -> google.protobuf.StringValue
	2,  // 12: cbnet.v1.SystemManagementService.commandFromTheRemote:output_type -> cbnet.v1.CommandResult
	3,  // 13: cbnet.v1.CloudAdaptiveNetworkService.getCLADNet:output_type -> cbnet.v1.CLADNetSpecification
	4,  // 14: cbnet.v1.CloudAdaptiveNetworkService.getCLADNetList:output_type -> cbnet.v1.CLADNetSpecifications
	3,  // 15: cbnet.v1.CloudAdaptiveNetworkService.createCLADNet:output_type -> cbnet.v1.CLADNetSpecification
	8,  // 16: cbnet.v1.CloudAdaptiveNetworkService.deleteCLADNet:output_type -> cbnet.v1.DeletionResult
	3,  // 17: cbnet.v1.CloudAdaptiveNetworkService.updateCLADNet:output_type -> cbnet.v1.CLADNetSpecification
	7,  // 18: cbnet.v1.CloudAdaptiveNetworkService.recommendAvailableIPv4PrivateAddressSpaces:output_type -> cbnet.v1.AvailableIPv4PrivateAddressSpaces
	11, // [11:19] is the sub-list for method output_type
	3,  // [3:11] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_cloud_barista_network_proto_init() }
func file_cloud_barista_network_proto_init() {
	if File_cloud_barista_network_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cloud_barista_network_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Command); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_barista_network_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_barista_network_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CLADNetSpecification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_barista_network_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CLADNetSpecifications); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_barista_network_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CLADNetID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_barista_network_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPNetworks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_barista_network_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvailableIPv4PrivateAddressSpaces); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_barista_network_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletionResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cloud_barista_network_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_cloud_barista_network_proto_goTypes,
		DependencyIndexes: file_cloud_barista_network_proto_depIdxs,
		EnumInfos:         file_cloud_barista_network_proto_enumTypes,
		MessageInfos:      file_cloud_barista_network_proto_msgTypes,
	}.Build()
	File_cloud_barista_network_proto = out.File
	file_cloud_barista_network_proto_rawDesc = nil
	file_cloud_barista_network_proto_goTypes = nil
	file_cloud_barista_network_proto_depIdxs = nil
}
