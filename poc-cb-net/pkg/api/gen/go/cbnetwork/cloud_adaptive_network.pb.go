//*
// Messages and services of Cloud Adaptive Network (shortly CLADNet) are defined in this proto.
//
// The messages are described at first.
// The service is described next.
//
// NOTE - The auto-generated API document describes this proto in alphabetical order.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.17.3
// source: cbnetwork/cloud_adaptive_network.proto

package cb_larva

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//*
// It represents a specification of Cloud Adaptive Network.
type CLADNetSpecification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name             string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Ipv4AddressSpace string `protobuf:"bytes,3,opt,name=ipv4_address_space,json=ipv4AddressSpace,proto3" json:"ipv4_address_space,omitempty"`
	Description      string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *CLADNetSpecification) Reset() {
	*x = CLADNetSpecification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cbnetwork_cloud_adaptive_network_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CLADNetSpecification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CLADNetSpecification) ProtoMessage() {}

func (x *CLADNetSpecification) ProtoReflect() protoreflect.Message {
	mi := &file_cbnetwork_cloud_adaptive_network_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CLADNetSpecification.ProtoReflect.Descriptor instead.
func (*CLADNetSpecification) Descriptor() ([]byte, []int) {
	return file_cbnetwork_cloud_adaptive_network_proto_rawDescGZIP(), []int{0}
}

func (x *CLADNetSpecification) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CLADNetSpecification) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CLADNetSpecification) GetIpv4AddressSpace() string {
	if x != nil {
		return x.Ipv4AddressSpace
	}
	return ""
}

func (x *CLADNetSpecification) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

//*
// It represents a list of Cloud Adaptive Network specifications.
type CLADNetSpecifications struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CladnetSpecifications []*CLADNetSpecification `protobuf:"bytes,1,rep,name=cladnet_specifications,json=cladnetSpecifications,proto3" json:"cladnet_specifications,omitempty"`
}

func (x *CLADNetSpecifications) Reset() {
	*x = CLADNetSpecifications{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cbnetwork_cloud_adaptive_network_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CLADNetSpecifications) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CLADNetSpecifications) ProtoMessage() {}

func (x *CLADNetSpecifications) ProtoReflect() protoreflect.Message {
	mi := &file_cbnetwork_cloud_adaptive_network_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CLADNetSpecifications.ProtoReflect.Descriptor instead.
func (*CLADNetSpecifications) Descriptor() ([]byte, []int) {
	return file_cbnetwork_cloud_adaptive_network_proto_rawDescGZIP(), []int{1}
}

func (x *CLADNetSpecifications) GetCladnetSpecifications() []*CLADNetSpecification {
	if x != nil {
		return x.CladnetSpecifications
	}
	return nil
}

//*
// It represents An ID of Cloud Adaptive Network.
type CLADNetID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *CLADNetID) Reset() {
	*x = CLADNetID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cbnetwork_cloud_adaptive_network_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CLADNetID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CLADNetID) ProtoMessage() {}

func (x *CLADNetID) ProtoReflect() protoreflect.Message {
	mi := &file_cbnetwork_cloud_adaptive_network_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CLADNetID.ProtoReflect.Descriptor instead.
func (*CLADNetID) Descriptor() ([]byte, []int) {
	return file_cbnetwork_cloud_adaptive_network_proto_rawDescGZIP(), []int{2}
}

func (x *CLADNetID) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

//*
// It represents A list of IP networks (e.g., 10.0.0.0/8).
type IPNetworks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpNetworks []string `protobuf:"bytes,1,rep,name=ip_networks,json=ipNetworks,proto3" json:"ip_networks,omitempty"`
}

func (x *IPNetworks) Reset() {
	*x = IPNetworks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cbnetwork_cloud_adaptive_network_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPNetworks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPNetworks) ProtoMessage() {}

func (x *IPNetworks) ProtoReflect() protoreflect.Message {
	mi := &file_cbnetwork_cloud_adaptive_network_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPNetworks.ProtoReflect.Descriptor instead.
func (*IPNetworks) Descriptor() ([]byte, []int) {
	return file_cbnetwork_cloud_adaptive_network_proto_rawDescGZIP(), []int{3}
}

func (x *IPNetworks) GetIpNetworks() []string {
	if x != nil {
		return x.IpNetworks
	}
	return nil
}

//*
// It represents available IPv4 private address spaces
// (also known as CIDR block, CIDR range, IP address range).
type AvailableIPv4PrivateAddressSpaces struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecommendedIpv4PrivateAddressSpace string   `protobuf:"bytes,1,opt,name=recommended_ipv4_private_address_space,json=recommendedIpv4PrivateAddressSpace,proto3" json:"recommended_ipv4_private_address_space,omitempty"`
	AddressSpace10S                    []string `protobuf:"bytes,2,rep,name=address_space10s,json=addressSpace10s,proto3" json:"address_space10s,omitempty"`
	AddressSpace172S                   []string `protobuf:"bytes,3,rep,name=address_space172s,json=addressSpace172s,proto3" json:"address_space172s,omitempty"`
	AddressSpace192S                   []string `protobuf:"bytes,4,rep,name=address_space192s,json=addressSpace192s,proto3" json:"address_space192s,omitempty"`
}

func (x *AvailableIPv4PrivateAddressSpaces) Reset() {
	*x = AvailableIPv4PrivateAddressSpaces{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cbnetwork_cloud_adaptive_network_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvailableIPv4PrivateAddressSpaces) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvailableIPv4PrivateAddressSpaces) ProtoMessage() {}

func (x *AvailableIPv4PrivateAddressSpaces) ProtoReflect() protoreflect.Message {
	mi := &file_cbnetwork_cloud_adaptive_network_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvailableIPv4PrivateAddressSpaces.ProtoReflect.Descriptor instead.
func (*AvailableIPv4PrivateAddressSpaces) Descriptor() ([]byte, []int) {
	return file_cbnetwork_cloud_adaptive_network_proto_rawDescGZIP(), []int{4}
}

func (x *AvailableIPv4PrivateAddressSpaces) GetRecommendedIpv4PrivateAddressSpace() string {
	if x != nil {
		return x.RecommendedIpv4PrivateAddressSpace
	}
	return ""
}

func (x *AvailableIPv4PrivateAddressSpaces) GetAddressSpace10S() []string {
	if x != nil {
		return x.AddressSpace10S
	}
	return nil
}

func (x *AvailableIPv4PrivateAddressSpaces) GetAddressSpace172S() []string {
	if x != nil {
		return x.AddressSpace172S
	}
	return nil
}

func (x *AvailableIPv4PrivateAddressSpaces) GetAddressSpace192S() []string {
	if x != nil {
		return x.AddressSpace192S
	}
	return nil
}

//*
// It represents a result of attempt to delete a Cloud Adaptive Network.
type DeletionResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsSucceeded          bool                  `protobuf:"varint,1,opt,name=is_succeeded,json=isSucceeded,proto3" json:"is_succeeded,omitempty"`
	Message              string                `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	CladnetSpecification *CLADNetSpecification `protobuf:"bytes,3,opt,name=cladnet_specification,json=cladnetSpecification,proto3" json:"cladnet_specification,omitempty"`
}

func (x *DeletionResult) Reset() {
	*x = DeletionResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cbnetwork_cloud_adaptive_network_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletionResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletionResult) ProtoMessage() {}

func (x *DeletionResult) ProtoReflect() protoreflect.Message {
	mi := &file_cbnetwork_cloud_adaptive_network_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletionResult.ProtoReflect.Descriptor instead.
func (*DeletionResult) Descriptor() ([]byte, []int) {
	return file_cbnetwork_cloud_adaptive_network_proto_rawDescGZIP(), []int{5}
}

func (x *DeletionResult) GetIsSucceeded() bool {
	if x != nil {
		return x.IsSucceeded
	}
	return false
}

func (x *DeletionResult) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DeletionResult) GetCladnetSpecification() *CLADNetSpecification {
	if x != nil {
		return x.CladnetSpecification
	}
	return nil
}

var File_cbnetwork_cloud_adaptive_network_proto protoreflect.FileDescriptor

var file_cbnetwork_cloud_adaptive_network_proto_rawDesc = []byte{
	0x0a, 0x26, 0x63, 0x62, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x5f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x63, 0x62, 0x6e, 0x65, 0x74, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8a, 0x01, 0x0a, 0x14, 0x43,
	0x4c, 0x41, 0x44, 0x4e, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x70, 0x76, 0x34, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x70, 0x76, 0x34, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x6b, 0x0a, 0x15, 0x43, 0x4c, 0x41, 0x44, 0x4e,
	0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x52, 0x0a, 0x16, 0x63, 0x6c, 0x61, 0x64, 0x6e, 0x65, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x63, 0x62, 0x6e, 0x65, 0x74, 0x2e, 0x43, 0x4c, 0x41, 0x44, 0x4e, 0x65, 0x74,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x15, 0x63,
	0x6c, 0x61, 0x64, 0x6e, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x21, 0x0a, 0x09, 0x43, 0x4c, 0x41, 0x44, 0x4e, 0x65, 0x74, 0x49,
	0x44, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x2d, 0x0a, 0x0a, 0x49, 0x50, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x70, 0x5f, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x70, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x22, 0xfc, 0x01, 0x0a, 0x21, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x50, 0x76, 0x34, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x52, 0x0a, 0x26,
	0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x69, 0x70, 0x76, 0x34,
	0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x22, 0x72, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x49, 0x70, 0x76, 0x34, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x70, 0x61, 0x63, 0x65,
	0x12, 0x29, 0x0a, 0x10, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x31, 0x30, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x53, 0x70, 0x61, 0x63, 0x65, 0x31, 0x30, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x31, 0x37, 0x32, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x31, 0x37, 0x32, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x31, 0x39, 0x32, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x10, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x31, 0x39, 0x32, 0x73, 0x22, 0x9f, 0x01, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x69, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x50, 0x0a, 0x15, 0x63, 0x6c, 0x61, 0x64, 0x6e, 0x65, 0x74,
	0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x62, 0x6e, 0x65, 0x74, 0x2e, 0x43, 0x4c, 0x41,
	0x44, 0x4e, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x14, 0x63, 0x6c, 0x61, 0x64, 0x6e, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0xdd, 0x05, 0x0a, 0x1b, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x50, 0x0a, 0x08, 0x73, 0x61, 0x79, 0x48, 0x65,
	0x6c, 0x6c, 0x6f, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x0e, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x08, 0x12, 0x06, 0x2f, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x12, 0x58, 0x0a, 0x0a, 0x67, 0x65, 0x74,
	0x43, 0x4c, 0x41, 0x44, 0x4e, 0x65, 0x74, 0x12, 0x10, 0x2e, 0x63, 0x62, 0x6e, 0x65, 0x74, 0x2e,
	0x43, 0x4c, 0x41, 0x44, 0x4e, 0x65, 0x74, 0x49, 0x44, 0x1a, 0x1b, 0x2e, 0x63, 0x62, 0x6e, 0x65,
	0x74, 0x2e, 0x43, 0x4c, 0x41, 0x44, 0x4e, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x13,
	0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x61, 0x64, 0x6e, 0x65, 0x74, 0x2f, 0x7b, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x7d, 0x12, 0x5b, 0x0a, 0x0e, 0x67, 0x65, 0x74, 0x43, 0x4c, 0x41, 0x44, 0x4e, 0x65,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1c, 0x2e,
	0x63, 0x62, 0x6e, 0x65, 0x74, 0x2e, 0x43, 0x4c, 0x41, 0x44, 0x4e, 0x65, 0x74, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x13, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x0d, 0x12, 0x0b, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x61, 0x64, 0x6e, 0x65, 0x74,
	0x12, 0x61, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x4c, 0x41, 0x44, 0x4e, 0x65,
	0x74, 0x12, 0x1b, 0x2e, 0x63, 0x62, 0x6e, 0x65, 0x74, 0x2e, 0x43, 0x4c, 0x41, 0x44, 0x4e, 0x65,
	0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x1b,
	0x2e, 0x63, 0x62, 0x6e, 0x65, 0x74, 0x2e, 0x43, 0x4c, 0x41, 0x44, 0x4e, 0x65, 0x74, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x16, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x10, 0x22, 0x0b, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x61, 0x64, 0x6e, 0x65, 0x74,
	0x3a, 0x01, 0x2a, 0x12, 0x9f, 0x01, 0x0a, 0x2a, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x64, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x50, 0x76, 0x34, 0x50, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x73, 0x12, 0x11, 0x2e, 0x63, 0x62, 0x6e, 0x65, 0x74, 0x2e, 0x49, 0x50, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x1a, 0x28, 0x2e, 0x63, 0x62, 0x6e, 0x65, 0x74, 0x2e, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x50, 0x76, 0x34, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x70, 0x61, 0x63, 0x65, 0x73, 0x22,
	0x34, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x22, 0x29, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x61,
	0x64, 0x6e, 0x65, 0x74, 0x2f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x2d, 0x69,
	0x70, 0x76, 0x34, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x4d, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x4c, 0x41, 0x44, 0x4e, 0x65, 0x74, 0x12, 0x10, 0x2e, 0x63, 0x62, 0x6e, 0x65, 0x74, 0x2e, 0x43,
	0x4c, 0x41, 0x44, 0x4e, 0x65, 0x74, 0x49, 0x44, 0x1a, 0x15, 0x2e, 0x63, 0x62, 0x6e, 0x65, 0x74,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x13, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x2a, 0x0b, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x61,
	0x64, 0x6e, 0x65, 0x74, 0x12, 0x61, 0x0a, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x4c,
	0x41, 0x44, 0x4e, 0x65, 0x74, 0x12, 0x1b, 0x2e, 0x63, 0x62, 0x6e, 0x65, 0x74, 0x2e, 0x43, 0x4c,
	0x41, 0x44, 0x4e, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0x1b, 0x2e, 0x63, 0x62, 0x6e, 0x65, 0x74, 0x2e, 0x43, 0x4c, 0x41, 0x44, 0x4e,
	0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x1a, 0x0b, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x61,
	0x64, 0x6e, 0x65, 0x74, 0x3a, 0x01, 0x2a, 0x42, 0x23, 0x5a, 0x21, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x62, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2f, 0x63, 0x62, 0x2d, 0x6c, 0x61, 0x72, 0x76, 0x61, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cbnetwork_cloud_adaptive_network_proto_rawDescOnce sync.Once
	file_cbnetwork_cloud_adaptive_network_proto_rawDescData = file_cbnetwork_cloud_adaptive_network_proto_rawDesc
)

func file_cbnetwork_cloud_adaptive_network_proto_rawDescGZIP() []byte {
	file_cbnetwork_cloud_adaptive_network_proto_rawDescOnce.Do(func() {
		file_cbnetwork_cloud_adaptive_network_proto_rawDescData = protoimpl.X.CompressGZIP(file_cbnetwork_cloud_adaptive_network_proto_rawDescData)
	})
	return file_cbnetwork_cloud_adaptive_network_proto_rawDescData
}

var file_cbnetwork_cloud_adaptive_network_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_cbnetwork_cloud_adaptive_network_proto_goTypes = []interface{}{
	(*CLADNetSpecification)(nil),              // 0: cbnet.CLADNetSpecification
	(*CLADNetSpecifications)(nil),             // 1: cbnet.CLADNetSpecifications
	(*CLADNetID)(nil),                         // 2: cbnet.CLADNetID
	(*IPNetworks)(nil),                        // 3: cbnet.IPNetworks
	(*AvailableIPv4PrivateAddressSpaces)(nil), // 4: cbnet.AvailableIPv4PrivateAddressSpaces
	(*DeletionResult)(nil),                    // 5: cbnet.DeletionResult
	(*emptypb.Empty)(nil),                     // 6: google.protobuf.Empty
	(*wrapperspb.StringValue)(nil),            // 7: google.protobuf.StringValue
}
var file_cbnetwork_cloud_adaptive_network_proto_depIdxs = []int32{
	0, // 0: cbnet.CLADNetSpecifications.cladnet_specifications:type_name -> cbnet.CLADNetSpecification
	0, // 1: cbnet.DeletionResult.cladnet_specification:type_name -> cbnet.CLADNetSpecification
	6, // 2: cbnet.CloudAdaptiveNetworkService.sayHello:input_type -> google.protobuf.Empty
	2, // 3: cbnet.CloudAdaptiveNetworkService.getCLADNet:input_type -> cbnet.CLADNetID
	6, // 4: cbnet.CloudAdaptiveNetworkService.getCLADNetList:input_type -> google.protobuf.Empty
	0, // 5: cbnet.CloudAdaptiveNetworkService.createCLADNet:input_type -> cbnet.CLADNetSpecification
	3, // 6: cbnet.CloudAdaptiveNetworkService.recommendAvailableIPv4PrivateAddressSpaces:input_type -> cbnet.IPNetworks
	2, // 7: cbnet.CloudAdaptiveNetworkService.deleteCLADNet:input_type -> cbnet.CLADNetID
	0, // 8: cbnet.CloudAdaptiveNetworkService.updateCLADNet:input_type -> cbnet.CLADNetSpecification
	7, // 9: cbnet.CloudAdaptiveNetworkService.sayHello:output_type -> google.protobuf.StringValue
	0, // 10: cbnet.CloudAdaptiveNetworkService.getCLADNet:output_type -> cbnet.CLADNetSpecification
	1, // 11: cbnet.CloudAdaptiveNetworkService.getCLADNetList:output_type -> cbnet.CLADNetSpecifications
	0, // 12: cbnet.CloudAdaptiveNetworkService.createCLADNet:output_type -> cbnet.CLADNetSpecification
	4, // 13: cbnet.CloudAdaptiveNetworkService.recommendAvailableIPv4PrivateAddressSpaces:output_type -> cbnet.AvailableIPv4PrivateAddressSpaces
	5, // 14: cbnet.CloudAdaptiveNetworkService.deleteCLADNet:output_type -> cbnet.DeletionResult
	0, // 15: cbnet.CloudAdaptiveNetworkService.updateCLADNet:output_type -> cbnet.CLADNetSpecification
	9, // [9:16] is the sub-list for method output_type
	2, // [2:9] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_cbnetwork_cloud_adaptive_network_proto_init() }
func file_cbnetwork_cloud_adaptive_network_proto_init() {
	if File_cbnetwork_cloud_adaptive_network_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cbnetwork_cloud_adaptive_network_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CLADNetSpecification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cbnetwork_cloud_adaptive_network_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CLADNetSpecifications); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cbnetwork_cloud_adaptive_network_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CLADNetID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cbnetwork_cloud_adaptive_network_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPNetworks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cbnetwork_cloud_adaptive_network_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvailableIPv4PrivateAddressSpaces); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cbnetwork_cloud_adaptive_network_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletionResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cbnetwork_cloud_adaptive_network_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cbnetwork_cloud_adaptive_network_proto_goTypes,
		DependencyIndexes: file_cbnetwork_cloud_adaptive_network_proto_depIdxs,
		MessageInfos:      file_cbnetwork_cloud_adaptive_network_proto_msgTypes,
	}.Build()
	File_cbnetwork_cloud_adaptive_network_proto = out.File
	file_cbnetwork_cloud_adaptive_network_proto_rawDesc = nil
	file_cbnetwork_cloud_adaptive_network_proto_goTypes = nil
	file_cbnetwork_cloud_adaptive_network_proto_depIdxs = nil
}
